# css

css doesn't run without javascript

selctor declaration

When a selector appears unprefixed by any punctuation, then it is assumed to
match to an HTML tag. 

The declaration part of a CSS rule opens and closes with curly braces: {  }  
And between them, you can put any number of property value pairs.

```css
p {
  font-size: 12px;
  line-height: 15px;
  color: #223344;
}
```

tag selector
li { list-style-type: circle; }

id selector
#p18 { color: blue; }

descendant selectors
#intro a { color: red; }

Direct descendant selectors ( > )
#intro > a { font-size: large; }

body > * { margin-left: 10px; } /* all the _direct_ children of the body
receive the margin */ p * { text-decoration: underline; } /* the text of the
paragraph will be normal, but any children anywhere inside it will be
underlined */

Everything selector (*)

The class attribute is similar to the id. However, whereas the id must be
unique and singular, the values of the class attribute can be shared by
multiple tags. And, multiple classes can be assigned to a tag by simply
separating them with spaces. 

<ul>
<li class="bird flying">eagle</li>
<li class="bird">ostrich</li>
<li class="insect">ant</li>
<li class="insect flying">moth</li>
</ul> 

.bird   { color: blue; }
.insect { color: green; }
.flying { text-decoration: underline; }

blockquote.speech { font-color: green; }

In the example above, the blockquote.speech selector is a blockquote tag
selector combined with a .speech class selector.  So this rule will not
necessarily apply to every blockquote, nor every element with the speech class.
Instead, it will only apply to those blockquotes that also have the speech
class.

It isn't unusual to see multiple classes joined this way as well:

.insect.flying { text-decoration: underline; font-weight:bold; }

Most CSS rules once applied to an element are also applied to all
the children of that element, and to their children, and theirs
ad infinitum. There are exceptions, notably the layout properties
(margin, padding, position, width, etc.) and the decorative properties
(border, background, etc.) do not cascade. This cascading of a CSS
property from parent to child is also called "inheritance".

padding: inherit; 

There is no reliable rule for which CSS properties are inheritable by default
and which are not. However, generally, the properties associated with
positioning and layout are not inherited.  Likewise, the decorative properties
(borders, background images, etc.) do not inherit.  Most properties that begin
with text- or font- inherit.

However, what happens when there are different rules competing to set different
values for the same property?  This is where CSS precedence comes into play.
When rendering CSS, the browser has some guidelines it follows for resolving
conflicting rules. 

1 - Most specific rule
2 - #id selector is the most specific
3- .class selector is more specific than a tag selector
4- Rules that come later override those that come earlier

p { color: orange !important; }

margin  
border: 5px solid blue;  
padding  

The margin is always transparent, and each side can be set individually.  The
unique thing about the margin is that the values for any of the sides can be
negative

To center an inline element, we use the text-align property of its parent.   

p { text-align: center; } /* the text and any inline children of this element
will be centered */

If this isn't satisfactory, consider changing the element to be inline-block or block.

How do you center a block level element? First, you may recall that block level
elements take the width of their parent by default. If the element is the same
width as its parent, it is already centered.

div { width: 200px; margin: auto; }

Do auto margins seem spooky to you?  There is a better way to achieve centering
and its name is flexbox.

Vertical centering:

inline

Inline elements respect the vertical-align property. This determines how the
inline element is aligned relative to the baseline it is being laid upon. This
may or may not solve your vertical centering conundrum.  block

There is no margin:auto approach to vertical centering. There are some
complicated systems that folk have developed, but the shortest and best answer
to vertical centering: use flexbox. 

The 'left', 'top', 'right', and 'bottom' properties

In CSS, there are four properties which can be used to adjust or set the
position of an element. Those properties are: left, top, right, and bottom. 

However, in one of the best jokes played by the authors of the CSS
specification, using those properties by themselves will have no effect on any
element. Surprisingly, most developers struggling with CSS don't find this
funny.   

The reason these properties don't work by default is that they only work when
applied to positioned elements. And positioned elements are those that have had
their position property changed from the default. 

The CSS position property governs how an element is positioned on the page and
how it responds to the position adjusting properties (left, top, right, and
bottom).  Up to this point in this course, we have not used this property and
so everything we've seen has been the default position, which is
position:static for all elements.  

As of today, the position property has four different values it can take:
static, relative, absolute, and fixed.

static

position: static; /* the default */

A position property of static is the default for all elements. It
simply means that all elements follow the "flowing text"model of
layout and the only properties influencing their position are margins,
padding, and the display property that selects block level layout,
inline or inline-block. Static elements ignore the positioning
properties we read about earlier (left, top, right, and bottom).

fixed

position: fixed;

A fixed positioned element respects the positioning properties (left,
top, right, and bottom). A fixed positioned element is positioned
against the window rectangle (aka the viewport). This means that fixed
position elements will not scroll with the rest of the page. Fixed
position elements can easily "stick" to the side or bottom or top of
the browser.

p {
  position: relative; 
  left: 40px; 
}

With the z-index you can control overlapping - whether or not an element is in
front of or behind other sibling positioned elements.  The z-index can be an
integer 0 or higher. The higher the number, the more "topmost" or "overlapping"
the element will be.  

If z-index is not set, siblings that appear later in the HTML document overlap
(are "higher than") earlier siblings.

# flexbox

If you have a parent element that contains some child elements, then putting
display:flex; on the parent is all that is needed to get started. The parent
itself behaves like a normal block level element, it is the flex container, and
all of its children are flex items. 

It's not a bad idea to specify the flex-flow for the flex container
(`flex-flow: row wrap;`), but it isn't required.

It's generally a good idea to also initialize the flex property on the flex
items (e.g. flex:1), but again, this isn't required.

p { flex: 1 1 87px;  /* use flex: <flex-grow> <flex-shrink> <flex-basis> */}

The flex-basis provides the starting dimension (width or height) for the
flex-item. It may be grown or shrunk from that.

If you are considering changing the display of several elements to be
inline-block, that may indicate that you should be using flexbox instead. 

If you need to center something vertically, unless it is an inline element or
the content of a table cell, the best answer is almost certainly flexbox.

# selectors

a b ²q¹ descendent children
a > b ²q¹ direct children
a[atr="some"]
a:hover ²q¹ pseudoclass

---

media query: @media (min-width: 600px) { … }
@media (max-width: 100px) { /* CSS Rules */ }
@media (min-height: 350px) { /* CSS Rules */ }

# grid

display: grid;
grid-column-gap:
grid-row-gap:
grid-template-columns: 200px 200px auto;

# bootstrap

Copy-paste the stylesheet <link> into your <head> before all other stylesheets
to load our CSS.

# sass

`$ sass file.scss:file.css`
`$ sass --watch file.scss:file.css`

nesting of rules

%some ²q¹ generic rule

.someclass {
  @extend %some;
  }

a mixin is a group of CSS declarations that can be reused throughout the style sheet.
The definition starts with @mixin followed by a custom name. 
A mixin is called with the @include directive

@mixin box-shadow($x, $y, $blur, $c){ 
  -webkit-box-shadow: $x $y $blur $c;
  -moz-box-shadow: $x $y $blur $c;
  -ms-box-shadow: $x $y $blur $c;
  box-shadow: $x $y $blur $c;
}

div {
  @include box-shadow(0px, 0px, 4px, #fff);
}

#

@media (max-width: 350px) {}

.name {
  position: absolute;
  left: -10000px;
  width: 1px;
  height: 1px;
  top: auto;
  overflow: hidden;
}

img {
  max-width: 100%;
  height: auto;
}

The max-width of 100% will make sure the image is never wider than the
container it is in, and the height of auto will make the image keep its
original aspect ratio.

The four different viewport units are:

    vw (viewport width): 10vw would be 10% of the viewport's width.
    vh (viewport height): 3vh would be 3% of the viewport's height.
    vmin (viewport minimum): 70vmin would be 70% of the viewport's smaller dimension (height or width).
    vmax (viewport maximum): 100vmax would be 100% of the viewport's bigger dimension (height or width).

# ---

background-image: url(
'data:image/svg+xml,\
<svg>...</svg>);
)

