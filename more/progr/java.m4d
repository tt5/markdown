# java

An interface is a blueprint for a class. Or, in other words, its a collection
of unimplemented method signatures.

An abstract class is a class that has unimplemented methods, though it can
actually have both.

# Records

Records are immutable data classes that require only the type and name of
fields.

The equals, hashCode, and toString methods, as well as the private, final
fields, and public constructor, are generated by the Java compiler.

```
public record Person (String name, String address) {}
```
# gradle

https://www.baeldung.com/gradle-source-sets

The Java plugin assumes src/main/java and src/test/java as default source directories.

custom:
```
source-sets 
  ├── src 
  │    └── main 
  │         ├── java 
  │         │    ├── SourceSetsMain.java
  │         │    └── SourceSetsObject.java
  │         ├── test 
  │         │    └── SourceSetsTest.java
  │         └── itest 
  │              └── SourceSetsITest.java
  └── build.gradle 

```

We can customize what directories are included with the srcDirs property:

```
sourceSets{
    itest {
        java {
            srcDirs("src/itest")
        }
    }
}
```

# ---

HelloWorls.java
```
public class HelloWorld {
  public static void main(String[] args) {
    System.out.println("Hello, World!");
    }
}
```

javac HelloWorld.java
java HelloWorld
